# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Osprey
scopeName: source.osprey
fileTypes: [osp]
uuid: c883a4ba-1189-4a40-9f0d-bf2511dfb188

patterns:
- include: '#root'

# Repository, yay!
repository:
  root:
    patterns:
    - include: '#comment'
    - include: '#string'
    - include: '#char'
    - include: '#number'
    - include: '#keyword'
    - include: '#identifier'
    - include: '#punctuation'

  comment:
    patterns:
    - comment: Documentation line comment
      name: comment.block.documentation.osprey
      match: ///.{0,90}.*
      captures:
        '1': {name: comment.block.documentation.osprey}
        '2': {name: comment.block.documentation.excess.osprey}
    - comment: Documentation block comment
      name: comment.block.documentation.osprey
      begin: /\*\*(?!/)
      end: \*/
    - comment: Line comment
      name: comment.line.double-slash.osprey
      match: //.*
    - comment: Delimited comment
      name: comment.block.osprey
      begin: /\*
      end: \*/

  string:
    patterns:
    - comment: Verbatim string literal
      name: string.quoted.triple.osprey # Closest match I could find
      begin: '[rR]"'
      end: '"(?!")'
      patterns:
      - name: constant.character.escape.osprey
        match: '""'
    - comment: Regular string literal
      name: string.quoted.double.osprey
      begin: '"'
      end: '"'
      patterns:
      - include: '#escape'

  char:
    comment: Character literal
    name: string.quoted.single.osprey
    begin: ''''
    end: ''''
    patterns:
    - include: '#escape'

  escape:
    comment: Escape sequence
    name: constant.character.escape.osprey
    match: '\\(?>["''\\0abnrt_-]|u\h{4}|U\h{8})'

  number:
    comment: All kinds of numeric literals
    patterns:
    - comment: Hexadecimal literals
      name: constant.numeric.osprey
      match: '0[xX]\h+(?:_\h+)*[uU]?'
    - comment: Decimal literals, both integral and real
      name: constant.numeric.osprey
      match: '[0-9]+(?:_[0-9]+)*(?:\.[0-9]+(?:[eE][+-]?[0-9]+)?|[kKgGmMtT]?[uU]?)?'

  keyword:
    comment: All kinds of keywords
    patterns:
    - comment: Control flow keywords
      name: keyword.control.osprey
      match: '(?>break|catch|do|else|finally|for|if|next|return|throw|try|while|with|yield)\b'
    - comment: Keyword operators
      name: keyword.operator.osprey
      match: '(?>and|in|is|not|or|refeq|ref|typeof|xor)\b|@' # Don't reorder ref and refeq; atomic group!
    - comment: Keyword constants
      name: constant.language.osprey
      match: '(?>false|null|true)\b'
    - comment: Language variables - this and base
      name: variable.language.osprey
      match: '(?>base|this)\b'
    - comment: Storage types
      name: storage.type.osprey
      match: '(?>const|function|var)\b'
    - comment: Extension keywords
      name: keyword.extension.osprey
      match: '__(?>extern|get_argc|init_type|named_const|primitive)\b'
    - comment: Other keywords
      name: keyword.other.osprey
      match: '(?>abstract|class|enum|get|global|inheritable|iter|namespace|new|operator|overridable|override|private|protected|public|set|static|to|use|where)\b'
    - comment: Reserved keywords
      name: invalid.illegal.keyword.osprey
      match: 'async\b'

  identifier:
    patterns:
    - comment: Type name (probably, anyway; if you follow good style!)
      name: entity.name.type.osprey
      match: '\\?[\p{Lu}][\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Cf}_]*'
    - comment: Identifier (regular or escaped)
      name: variable.other.osprey
      match: '\\?[\p{L}_][\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Cf}_]*'

  punctuation:
    comment: Assorted punctuation
    patterns:
    - name: meta.brace.round.osprey
      match: '\(|\)'
    - name: meta.brace.square.osprey
      match: '\[|\]'
    - name: meta.brace.curly.osprey
      match: '\{|\}'
...
